
import qutip as qt
import scipy.constants as const
import matplotlib.pyplot as plt
import numpy as np

class NVHamiltonian():
	def __init__(self):
		self.hbar = const.hbar
		self.sx = qt.jmat(1,'x')
		self.sy = qt.jmat(1,'y')
		self.sz = qt.jmat(1,'z')            # jmat is higher order spin operator. 1 in this case.
		self.Bz = 1.199e-4                 # Magnetic field along z axis. Value taken from reference 2.
		self.ge = 5.27787566e11             # gyromagnetic ration of electron in Hz/T
		self.gc = 10.705e6                  # gyromagnetic ratio of C-13 nucleus in Hz/T for hyperfine interaction
		self.D = 2870.2e6                   # zero field splitting frequency in Hz
		
		self.Axx = 189.3e6
		self.Ayy = 128.4e6
		self.Azz = 128.9e6
		self.Axz = 24.1e6                  # Hyperfine Tensor components in NV frame of reference. Taken from reference 2.
		self.Ix = qt.jmat(0.5,'x')
		self.Iy = qt.jmat(0.5,'y')
		self.Iz = qt.jmat(0.5,'z')          # Spin 1/2 operators for C-13 nucleus
		
	def spinHamiltonian(self):
		Hs = self.D*(self.sz*self.sz - (qt.qeye(3)*2/3)) + self.ge*self.Bz*self.sz      # Electric term ignored as it is negligible
		self.Eigenstates_sp = Hs.eigenstates()
		print ("Spin Hamiltonian Eigenenergies: "+ str(abs(self.Eigenstates_sp[0])) + "\n")
	
	def hyperfineHamiltonian(self):
		comp1 = self.Axx*qt.tensor(self.sx,self.Ix)
		comp2 = self.Ayy*qt.tensor(self.sy,self.Iy)
		comp3 = self.Azz*qt.tensor(self.sz,self.Iz)
		comp4 = self.Axz*(qt.tensor(self.sx,self.Iz)+qt.tensor(self.sz,self.Ix))
		
		Hhf = comp1 + comp2 +comp3 +comp4
		H = self.D*(qt.tensor(self.sz*self.sz,qt.qeye(2))) + self.ge*self.Bz*qt.tensor(self.sz,qt.qeye(2)) + self.gc*self.Bz*qt.tensor(qt.qeye(3),self.Iz) + Hhf
		self.Eigenstates_hf = H.eigenstates()
		print("Hyperfine Splitting Hamiltonian Eigenenergies: " + str(abs(self.Eigenstates_hf[0])) + "\n")

        def plotter(self):
            reso = np.full((8),1)
            freq = np.empty(0)
                for i in range (8):
                    for j in range (i+1,8):
                        np.append(freq,abs(self.Eigenstates_hf[0][i]-self.Eigenstates_hf[0][j]))
            print(freq)
                    

		
                
		
if __name__ == '__main__':
	run = NVHamiltonian()
	run.spinHamiltonian()
	run.hyperfineHamiltonian()
        run.plotter()
	
		
		
